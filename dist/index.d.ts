// Generated by dts-bundle-generator v9.5.1

import React$1 from 'react';
import { RouteProps } from 'react-router-dom';

interface EntryConfig {
	source: string | object;
	namespace: string;
	name: string;
	version: string;
	arguments?: unknown[];
}
interface RegisterConfig {
	entry: EntryConfig;
	type: "scope" | "module";
	scope?: boolean;
	tags?: string[];
	requires?: string[];
	lazy?: boolean;
	asset?: {
		src: string;
	};
	resource?: {
		src: string;
	};
}
declare class CModule<T = any> {
	constructor(...args: unknown[]);
	inject?: (injections: T) => void;
}
type Module<T = any> = CModule<T> | Record<string, unknown>;
interface IModuleImportObject {
	default?: Module | ((...args: unknown[]) => void);
}
interface IModuleImport {
	config: RegisterConfig;
	module: IModuleImportObject | (() => Promise<Module>);
}
declare class _IInjectable<T = object> {
	constructor(...args: unknown[]);
	inject(injections: T): void;
	scope?(): Record<string, unknown>;
	static inject: Record<string, string>;
}
type IInjectable<T> = typeof _IInjectable<T>;
declare class Marshal {
	static version: string;
	renderCount: number;
	registered: Record<string, RegisterConfig>;
	loaded: Record<string, object>;
	tagMap: Record<string, IModuleImport[]>;
	scope: Record<string, unknown>;
	instanceMap: WeakMap<Module<any>, RegisterConfig>;
	constructor();
	addScope(name: string, value: unknown): void;
	render(): void;
	register(config: RegisterConfig): void;
	getModuleConstraint(config: RegisterConfig): string;
	get<Type>(key: string): Type | null;
	load(): Promise<void>;
	loadScopes(): Promise<Record<string, RegisterConfig>>;
	updateTagModules(): void;
	tagModules(moduleImport: IModuleImport): void;
	instantiateModule(moduleImport: IModuleImport): Module;
	mapInstance(config: RegisterConfig, module: Module): void;
	getMappedInstance(module: Module): RegisterConfig | undefined;
	loadDependencies(module: Module, config: RegisterConfig): Record<string, object> | undefined | false;
	isESClass(fn: unknown): boolean;
	orderModules(moduleRegistry: Record<string, RegisterConfig>): RegisterConfig[];
	generateLoadGroups(toSend: Record<string, RegisterConfig>): Promise<IModuleImport>[];
	isTag(string: string): boolean;
	import(source: string, addScope?: Record<string, unknown>): Promise<IModuleImportObject>;
	importModule(config: RegisterConfig): Promise<IModuleImportObject>;
	retrieveModulePromise(config: RegisterConfig): Promise<IModuleImport>;
	isObjectEmpty(obj: object): boolean;
}
declare type UnknownRecord = Record<symbol | string, unknown>;
interface ModulesEvent {
	modules: Record<string, Module$1>;
	canvas: HTMLCanvasElement | null;
}
interface Module$1 {
}
interface Modules {
	[key: string]: Module$1 | undefined;
	core: ICore;
}
declare type XValue = number;
declare type YValue = XValue;
interface IStart {
	x: XValue;
	y: YValue;
}
interface ISize {
	w: XValue;
	h: YValue;
}
interface IArea {
	size: ISize;
	start: IStart;
}
interface IHierarchy {
	parent: IParentDef | null;
	position: number;
}
interface IBaseDef<T = never> {
	[key: symbol | string]: unknown;
	id?: string;
	hierarchy?: IHierarchy;
	start: IStart;
	size: ISize;
	type: string;
	can?: {
		move?: boolean;
		scale?: boolean;
		remove?: boolean;
	};
	area?: IArea;
	data?: T;
}
interface IParentDef extends IBaseDef {
	layout: Layout;
}
interface ISequence {
	current: number;
	increment: number;
}
interface IDocumentDef extends IParentDef {
	type: "document";
	sequence: ISequence;
	base: Layout;
	start: {
		x: 0;
		y: 0;
	};
	size: {
		w: 0;
		h: 0;
	};
}
interface IFont {
	url: string;
	name: string;
}
interface ICore extends Module$1 {
	meta: {
		document: IDocumentDef;
	};
	clone: {
		definitions: (data: IBaseDef) => Promise<IBaseDef>;
		getOriginal: <T extends UnknownRecord = UnknownRecord>(object: T) => T;
		getClone: <T extends UnknownRecord = UnknownRecord>(object: T) => T;
	};
	manage: {
		markAsLayer: (layer: IBaseDef) => IBaseDef;
		add: (def: IBaseDef, parent?: IParentDef | null, position?: number | null) => void;
		addVolatile: (def: IBaseDef, parent?: IParentDef | null, position?: number | null) => void;
		move: (original: IBaseDef, newStart: IStart) => Promise<void>;
		resize: (original: IBaseDef, newSize: ISize) => Promise<void>;
		remove: (def: IBaseDef) => void;
		removeVolatile: (def: IBaseDef) => void;
		calcAndUpdateLayer: (original: IBaseDef) => Promise<void>;
	};
	view: {
		calc: (element: IBaseDef, parent?: IParentDef, position?: number) => Promise<IBaseDef | null>;
		draw: (element: IBaseDef) => void;
		redraw: (layout?: Layout) => void;
		recalculate: (parent?: IParentDef, layout?: Layout) => Promise<Layout>;
		redrawDebounce: (layout: Layout) => void;
	};
	policies: {
		isLayer: (layer: Record<symbol, unknown>) => boolean;
		isClone: (layer: Record<symbol, unknown>) => boolean;
	};
	font: {
		load: (font: IFont) => Promise<void>;
	};
	setting: {
		set: (name: string, value: unknown) => void;
		get: <T = unknown>(name: string) => T | null;
		has: (name: string) => boolean;
	};
}
type Layout = (IBaseDef | IParentDef)[];
declare class _ISubscriber {
	static subscriptions: Subscriptions;
}
type ISubscriber = typeof _ISubscriber;
type AmbiguousSubscription = string | Subscription | Subscription[] | EventHandler;
type EventHandler = (event: CustomEvent) => Promise<void> | void;
type Subscriptions = Record<string, AmbiguousSubscription>;
interface Subscription {
	method: string | EventHandler;
	priority?: number;
	constraint?: string | Module | null;
	index?: number;
}
interface ISubscriberObject {
	module: ISubscriber;
	config: RegisterConfig;
}
interface IEventRegistration {
	event: string;
	subscription: AmbiguousSubscription;
	constraint?: string | Module | null;
	sort?: boolean;
	symbol?: symbol | null;
}
interface IInjection extends Record<string, object> {
	subscribers: ISubscriberObject[];
	marshal: Marshal;
}
declare class Herald {
	#private;
	static inject: Record<string, string>;
	inject(injections: IInjection): void;
	dispatch(event: CustomEvent): Promise<void>;
	dispatchSync(event: CustomEvent): void;
	batch(events: IEventRegistration[]): () => void;
	register(event: string, subscription: AmbiguousSubscription, constraint?: string | Module | null, sort?: boolean, symbol?: symbol | null): () => void;
	unregister(event: string, symbol: symbol): void;
}
type PathProps = JSX.IntrinsicAttributes & RouteProps;
interface INavItem {
	node?: React$1.ReactNode;
	label?: string;
	link?: string;
	action?: (e: React$1.MouseEvent<HTMLElement>) => void;
	items?: INavItem[];
}
interface Injected extends Record<string, object> {
	marshal: Marshal;
	herald: Herald;
}
declare class Minstrel {
	#private;
	static inject: Record<string, string>;
	inject(injections: Injected): void;
	setRoute(props: PathProps): void;
	getRoutes(): PathProps[];
	getMenu(): INavItem[];
	addMenuItem(item: INavItem): void;
	setMenu(newMenu: INavItem[]): void;
	getModuleConfig(module: Module): RegisterConfig;
	getResourceUrl(module: Module, suffix: string): string;
	lazy(module: Module, suffix: string, props?: Record<string, any>): React$1.ReactNode;
	component<T>(module: Module, suffix: string, scope?: Record<string, any>): React$1.FC<T>;
	asset(module: Module, suffix: string): string;
}
export interface IParams {
	canvas: HTMLCanvasElement | null;
	modules: Modules;
	injected: IInjected;
}
declare enum Event$1 {
	REGISTER_INPUT = "antetype.conditions.input.register",
	REGISTER_METHOD = "antetype.conditions.method.register"
}
export interface IInputHandler<T = any> extends Record<string, unknown> {
	type: string;
	name: string;
	get: () => T;
	reset: () => void;
	set: (value: T) => void;
}
export interface ITitleInputHandler extends IInputHandler<string | null> {
	placeholder?: string;
	value: string | null;
}
export interface ISelectOption {
	label: string;
	value: string;
}
export interface ISelectInputHandler extends IInputHandler<string | null> {
	value: string | null;
	default?: string;
	options: ISelectOption[];
}
export interface IImageInputHandler extends IInputHandler<string | null> {
	value: string | null;
}
export interface IInput<G extends IInputHandler = IInputHandler> {
	type: string;
	name: string;
	generate: (layer: IBaseDef) => G;
	description?: string;
	icon?: string;
}
export interface IConditionAction {
}
interface IConditionInstruction {
	text: string;
}
export interface IRule {
	instruction: IConditionInstruction;
	actions: IConditionAction[];
}
export interface IConditionAwareDef extends IBaseDef {
	conditions?: {
		inputs?: IInputHandler[];
		rules?: IRule[];
	};
}
export interface IMethodArgument {
	type: string;
	value?: unknown;
}
export interface IMethod<T extends unknown[] = unknown[], P = unknown> {
	name: string;
	arguments: IMethodArgument[];
	resolve: (...args: T) => P;
}
export interface IConditions {
	retrieveInputs: () => Promise<Record<string, IInput>>;
	retrieveMethods: () => Promise<Record<string, IMethod>>;
}
export interface IRegisterInputEvent {
	inputs: Record<string, IInput>;
}
export type RegisterInputEvent = CustomEvent<IRegisterInputEvent>;
export interface IRegisterMethodEvent {
	inputs: Record<string, IMethod>;
}
export type RegisterMethodEvent = CustomEvent<IRegisterMethodEvent>;
export interface IInjected extends Record<string, object> {
	minstrel: Minstrel;
	herald: Herald;
}
export declare class Conditions implements Module$1 {
	#private;
	static inject: Record<string, string>;
	inject(injections: IInjected): void;
	/**
	 * Example of lazy loading the module
	 */
	register(event: CustomEvent<ModulesEvent>): Promise<void>;
	static subscriptions: Subscriptions;
}
declare const EnSkeleton: IInjectable<IInjected> & ISubscriber;

export {
	EnSkeleton as default,
	Event$1 as Event,
};

export {};
